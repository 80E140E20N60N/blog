(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{455:function(t,n,r){"use strict";r.r(n);var e=r(23),a=Object(e.a)({},(function(){var t=this,n=t.$createElement,r=t._self._c||n;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"qiankun基础"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#qiankun基础"}},[t._v("#")]),t._v(" qiankun基础")]),t._v(" "),r("h2",{attrs:{id:"特点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),r("p",[t._v("微前端架构具备以下几个核心价值：")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("技术栈无关"),r("br"),t._v("\n主框架不限制接入应用的技术栈，微应用具备完全自主权")])]),t._v(" "),r("li",[r("p",[t._v("独立开发、独立部署"),r("br"),t._v("\n微应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新")])]),t._v(" "),r("li",[r("p",[t._v("增量升级")]),t._v(" "),r("p",[t._v("在面对各种复杂场景时，我们通常很难对一个已经存在的系统做全量的技术栈升级或重构，而微前端是一种非常好的实施渐进式重构的手段和策略")])]),t._v(" "),r("li",[r("p",[t._v("独立运行时"),r("br"),t._v("\n每个微应用之间状态隔离，运行时状态不共享")])])]),t._v(" "),r("p",[t._v("微前端架构旨在解决单体应用在一个相对长的时间跨度下，由于参与的人员、团队的增多、变迁，从一个普通应用演变成一个巨石应用("),r("a",{attrs:{href:"https://www.youtube.com/watch?v=pU1gXA0rfwc",target:"_blank",rel:"noopener noreferrer"}},[t._v("Frontend Monolith"),r("OutboundLink")],1),t._v(")后，随之而来的应用不可维护的问题。这类问题在企业级 Web 应用中尤其常见。")])])}),[],!1,null,null,null);n.default=a.exports}}]);